<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: temporal/api/workflowservice/v1/request_response.proto

namespace Temporal\Api\Workflowservice\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>temporal.api.workflowservice.v1.UnpauseActivityByIdRequest</code>
 */
class UnpauseActivityByIdRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Namespace of the workflow which scheduled this activity.
     *
     * Generated from protobuf field <code>string namespace = 1;</code>
     */
    protected $namespace = '';
    /**
     * ID of the workflow which scheduled this activity.
     *
     * Generated from protobuf field <code>string workflow_id = 2;</code>
     */
    protected $workflow_id = '';
    /**
     * Run ID of the workflow which scheduled this activity.
     * If empty - latest workflow is used.
     *
     * Generated from protobuf field <code>string run_id = 3;</code>
     */
    protected $run_id = '';
    /**
     * ID of the activity we're updating.
     *
     * Generated from protobuf field <code>string activity_id = 4;</code>
     */
    protected $activity_id = '';
    /**
     * The identity of the client who initiated this request.
     *
     * Generated from protobuf field <code>string identity = 5;</code>
     */
    protected $identity = '';
    /**
     * Used to de-dupe requests.
     *
     * Generated from protobuf field <code>string request_id = 6;</code>
     */
    protected $request_id = '';
    protected $operation;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $namespace
     *           Namespace of the workflow which scheduled this activity.
     *     @type string $workflow_id
     *           ID of the workflow which scheduled this activity.
     *     @type string $run_id
     *           Run ID of the workflow which scheduled this activity.
     *           If empty - latest workflow is used.
     *     @type string $activity_id
     *           ID of the activity we're updating.
     *     @type string $identity
     *           The identity of the client who initiated this request.
     *     @type string $request_id
     *           Used to de-dupe requests.
     *     @type \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResumeOperation $resume
     *     @type \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResetOperation $reset
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Workflowservice\V1\RequestResponse::initOnce();
        parent::__construct($data);
    }

    /**
     * Namespace of the workflow which scheduled this activity.
     *
     * Generated from protobuf field <code>string namespace = 1;</code>
     * @return string
     */
    public function getNamespace()
    {
        return $this->namespace;
    }

    /**
     * Namespace of the workflow which scheduled this activity.
     *
     * Generated from protobuf field <code>string namespace = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setNamespace($var)
    {
        GPBUtil::checkString($var, True);
        $this->namespace = $var;

        return $this;
    }

    /**
     * ID of the workflow which scheduled this activity.
     *
     * Generated from protobuf field <code>string workflow_id = 2;</code>
     * @return string
     */
    public function getWorkflowId()
    {
        return $this->workflow_id;
    }

    /**
     * ID of the workflow which scheduled this activity.
     *
     * Generated from protobuf field <code>string workflow_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setWorkflowId($var)
    {
        GPBUtil::checkString($var, True);
        $this->workflow_id = $var;

        return $this;
    }

    /**
     * Run ID of the workflow which scheduled this activity.
     * If empty - latest workflow is used.
     *
     * Generated from protobuf field <code>string run_id = 3;</code>
     * @return string
     */
    public function getRunId()
    {
        return $this->run_id;
    }

    /**
     * Run ID of the workflow which scheduled this activity.
     * If empty - latest workflow is used.
     *
     * Generated from protobuf field <code>string run_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setRunId($var)
    {
        GPBUtil::checkString($var, True);
        $this->run_id = $var;

        return $this;
    }

    /**
     * ID of the activity we're updating.
     *
     * Generated from protobuf field <code>string activity_id = 4;</code>
     * @return string
     */
    public function getActivityId()
    {
        return $this->activity_id;
    }

    /**
     * ID of the activity we're updating.
     *
     * Generated from protobuf field <code>string activity_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setActivityId($var)
    {
        GPBUtil::checkString($var, True);
        $this->activity_id = $var;

        return $this;
    }

    /**
     * The identity of the client who initiated this request.
     *
     * Generated from protobuf field <code>string identity = 5;</code>
     * @return string
     */
    public function getIdentity()
    {
        return $this->identity;
    }

    /**
     * The identity of the client who initiated this request.
     *
     * Generated from protobuf field <code>string identity = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setIdentity($var)
    {
        GPBUtil::checkString($var, True);
        $this->identity = $var;

        return $this;
    }

    /**
     * Used to de-dupe requests.
     *
     * Generated from protobuf field <code>string request_id = 6;</code>
     * @return string
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * Used to de-dupe requests.
     *
     * Generated from protobuf field <code>string request_id = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setRequestId($var)
    {
        GPBUtil::checkString($var, True);
        $this->request_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.workflowservice.v1.UnpauseActivityByIdRequest.ResumeOperation resume = 7;</code>
     * @return \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResumeOperation|null
     */
    public function getResume()
    {
        return $this->readOneof(7);
    }

    public function hasResume()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.workflowservice.v1.UnpauseActivityByIdRequest.ResumeOperation resume = 7;</code>
     * @param \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResumeOperation $var
     * @return $this
     */
    public function setResume($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResumeOperation::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.workflowservice.v1.UnpauseActivityByIdRequest.ResetOperation reset = 8;</code>
     * @return \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResetOperation|null
     */
    public function getReset()
    {
        return $this->readOneof(8);
    }

    public function hasReset()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.workflowservice.v1.UnpauseActivityByIdRequest.ResetOperation reset = 8;</code>
     * @param \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResetOperation $var
     * @return $this
     */
    public function setReset($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Workflowservice\V1\UnpauseActivityByIdRequest\ResetOperation::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getOperation()
    {
        return $this->whichOneof("operation");
    }

}

