<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: temporal/api/deployment/v1/message.proto

namespace Temporal\Api\Deployment\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A Worker Deployment Version (Version, for short) represents all workers of the same 
 * code and config within a Deployment. Workers of the same Version are expected to 
 * behave exactly the same so when executions move between them there are no 
 * non-determinism issues.
 * Worker Deployment Versions are created in Temporal server automatically when 
 * their first poller arrives to the server.
 * Experimental. Worker Deployments are experimental and might significantly change in the future.
 *
 * Generated from protobuf message <code>temporal.api.deployment.v1.WorkerDeploymentVersionInfo</code>
 */
class WorkerDeploymentVersionInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * The fully-qualified string representation of the version, in the form "<deployment_name>.<build_id>".
     *
     * Generated from protobuf field <code>string version = 1;</code>
     */
    protected $version = '';
    /**
     * Generated from protobuf field <code>string deployment_name = 2;</code>
     */
    protected $deployment_name = '';
    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 3;</code>
     */
    protected $create_time = null;
    /**
     * Last time `current_since_time`, `ramping_since_time, or `ramp_percentage` of this version changed.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp routing_changed_time = 4;</code>
     */
    protected $routing_changed_time = null;
    /**
     * (-- api-linter: core::0140::prepositions=disabled
     *     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     * Nil if not current.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp current_since_time = 5;</code>
     */
    protected $current_since_time = null;
    /**
     * (-- api-linter: core::0140::prepositions=disabled
     *     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     * Nil if not ramping. Updated when the version first starts ramping, not on each ramp change.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp ramping_since_time = 6;</code>
     */
    protected $ramping_since_time = null;
    /**
     * Range: [0, 100]. Must be zero if the version is not ramping (i.e. `ramping_since_time` is nil).
     * Can be in the range [0, 100] if the version is ramping.
     *
     * Generated from protobuf field <code>float ramp_percentage = 7;</code>
     */
    protected $ramp_percentage = 0.0;
    /**
     * All the Task Queues that have ever polled from this Deployment version.
     *
     * Generated from protobuf field <code>repeated .temporal.api.deployment.v1.WorkerDeploymentVersionInfo.VersionTaskQueueInfo task_queue_infos = 8;</code>
     */
    private $task_queue_infos;
    /**
     * Helps user determine when it is safe to decommission the workers of this
     * Version. Not present when version is current or ramping.
     * Current limitations:
     * - Not supported for Unversioned mode.
     * - Periodically refreshed, may have delays up to few minutes (consult the
     *   last_checked_time value).
     * - Refreshed only when version is not current or ramping AND the status is not
     *   "drained" yet.
     * - Once the status is changed to "drained", it is not changed until the Version
     *   becomes Current or Ramping again, at which time the drainage info is cleared.
     *   This means if the Version is "drained" but new workflows are sent to it via
     *   Pinned Versioning Override, the status does not account for those Pinned-override
     *   executions and remains "drained".
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.VersionDrainageInfo drainage_info = 9;</code>
     */
    protected $drainage_info = null;
    /**
     * Arbitrary user-provided metadata attached to this version.
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.VersionMetadata metadata = 10;</code>
     */
    protected $metadata = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $version
     *           The fully-qualified string representation of the version, in the form "<deployment_name>.<build_id>".
     *     @type string $deployment_name
     *     @type \Google\Protobuf\Timestamp $create_time
     *     @type \Google\Protobuf\Timestamp $routing_changed_time
     *           Last time `current_since_time`, `ramping_since_time, or `ramp_percentage` of this version changed.
     *     @type \Google\Protobuf\Timestamp $current_since_time
     *           (-- api-linter: core::0140::prepositions=disabled
     *               aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     *           Nil if not current.
     *     @type \Google\Protobuf\Timestamp $ramping_since_time
     *           (-- api-linter: core::0140::prepositions=disabled
     *               aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     *           Nil if not ramping. Updated when the version first starts ramping, not on each ramp change.
     *     @type float $ramp_percentage
     *           Range: [0, 100]. Must be zero if the version is not ramping (i.e. `ramping_since_time` is nil).
     *           Can be in the range [0, 100] if the version is ramping.
     *     @type array<\Temporal\Api\Deployment\V1\WorkerDeploymentVersionInfo\VersionTaskQueueInfo>|\Google\Protobuf\Internal\RepeatedField $task_queue_infos
     *           All the Task Queues that have ever polled from this Deployment version.
     *     @type \Temporal\Api\Deployment\V1\VersionDrainageInfo $drainage_info
     *           Helps user determine when it is safe to decommission the workers of this
     *           Version. Not present when version is current or ramping.
     *           Current limitations:
     *           - Not supported for Unversioned mode.
     *           - Periodically refreshed, may have delays up to few minutes (consult the
     *             last_checked_time value).
     *           - Refreshed only when version is not current or ramping AND the status is not
     *             "drained" yet.
     *           - Once the status is changed to "drained", it is not changed until the Version
     *             becomes Current or Ramping again, at which time the drainage info is cleared.
     *             This means if the Version is "drained" but new workflows are sent to it via
     *             Pinned Versioning Override, the status does not account for those Pinned-override
     *             executions and remains "drained".
     *     @type \Temporal\Api\Deployment\V1\VersionMetadata $metadata
     *           Arbitrary user-provided metadata attached to this version.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Deployment\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * The fully-qualified string representation of the version, in the form "<deployment_name>.<build_id>".
     *
     * Generated from protobuf field <code>string version = 1;</code>
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * The fully-qualified string representation of the version, in the form "<deployment_name>.<build_id>".
     *
     * Generated from protobuf field <code>string version = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->version = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string deployment_name = 2;</code>
     * @return string
     */
    public function getDeploymentName()
    {
        return $this->deployment_name;
    }

    /**
     * Generated from protobuf field <code>string deployment_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDeploymentName($var)
    {
        GPBUtil::checkString($var, True);
        $this->deployment_name = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 3;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    public function hasCreateTime()
    {
        return isset($this->create_time);
    }

    public function clearCreateTime()
    {
        unset($this->create_time);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 3;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->create_time = $var;

        return $this;
    }

    /**
     * Last time `current_since_time`, `ramping_since_time, or `ramp_percentage` of this version changed.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp routing_changed_time = 4;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getRoutingChangedTime()
    {
        return $this->routing_changed_time;
    }

    public function hasRoutingChangedTime()
    {
        return isset($this->routing_changed_time);
    }

    public function clearRoutingChangedTime()
    {
        unset($this->routing_changed_time);
    }

    /**
     * Last time `current_since_time`, `ramping_since_time, or `ramp_percentage` of this version changed.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp routing_changed_time = 4;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setRoutingChangedTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->routing_changed_time = $var;

        return $this;
    }

    /**
     * (-- api-linter: core::0140::prepositions=disabled
     *     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     * Nil if not current.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp current_since_time = 5;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCurrentSinceTime()
    {
        return $this->current_since_time;
    }

    public function hasCurrentSinceTime()
    {
        return isset($this->current_since_time);
    }

    public function clearCurrentSinceTime()
    {
        unset($this->current_since_time);
    }

    /**
     * (-- api-linter: core::0140::prepositions=disabled
     *     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     * Nil if not current.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp current_since_time = 5;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCurrentSinceTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->current_since_time = $var;

        return $this;
    }

    /**
     * (-- api-linter: core::0140::prepositions=disabled
     *     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     * Nil if not ramping. Updated when the version first starts ramping, not on each ramp change.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp ramping_since_time = 6;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getRampingSinceTime()
    {
        return $this->ramping_since_time;
    }

    public function hasRampingSinceTime()
    {
        return isset($this->ramping_since_time);
    }

    public function clearRampingSinceTime()
    {
        unset($this->ramping_since_time);
    }

    /**
     * (-- api-linter: core::0140::prepositions=disabled
     *     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
     * Nil if not ramping. Updated when the version first starts ramping, not on each ramp change.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp ramping_since_time = 6;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setRampingSinceTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->ramping_since_time = $var;

        return $this;
    }

    /**
     * Range: [0, 100]. Must be zero if the version is not ramping (i.e. `ramping_since_time` is nil).
     * Can be in the range [0, 100] if the version is ramping.
     *
     * Generated from protobuf field <code>float ramp_percentage = 7;</code>
     * @return float
     */
    public function getRampPercentage()
    {
        return $this->ramp_percentage;
    }

    /**
     * Range: [0, 100]. Must be zero if the version is not ramping (i.e. `ramping_since_time` is nil).
     * Can be in the range [0, 100] if the version is ramping.
     *
     * Generated from protobuf field <code>float ramp_percentage = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setRampPercentage($var)
    {
        GPBUtil::checkFloat($var);
        $this->ramp_percentage = $var;

        return $this;
    }

    /**
     * All the Task Queues that have ever polled from this Deployment version.
     *
     * Generated from protobuf field <code>repeated .temporal.api.deployment.v1.WorkerDeploymentVersionInfo.VersionTaskQueueInfo task_queue_infos = 8;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTaskQueueInfos()
    {
        return $this->task_queue_infos;
    }

    /**
     * All the Task Queues that have ever polled from this Deployment version.
     *
     * Generated from protobuf field <code>repeated .temporal.api.deployment.v1.WorkerDeploymentVersionInfo.VersionTaskQueueInfo task_queue_infos = 8;</code>
     * @param array<\Temporal\Api\Deployment\V1\WorkerDeploymentVersionInfo\VersionTaskQueueInfo>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTaskQueueInfos($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Temporal\Api\Deployment\V1\WorkerDeploymentVersionInfo\VersionTaskQueueInfo::class);
        $this->task_queue_infos = $arr;

        return $this;
    }

    /**
     * Helps user determine when it is safe to decommission the workers of this
     * Version. Not present when version is current or ramping.
     * Current limitations:
     * - Not supported for Unversioned mode.
     * - Periodically refreshed, may have delays up to few minutes (consult the
     *   last_checked_time value).
     * - Refreshed only when version is not current or ramping AND the status is not
     *   "drained" yet.
     * - Once the status is changed to "drained", it is not changed until the Version
     *   becomes Current or Ramping again, at which time the drainage info is cleared.
     *   This means if the Version is "drained" but new workflows are sent to it via
     *   Pinned Versioning Override, the status does not account for those Pinned-override
     *   executions and remains "drained".
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.VersionDrainageInfo drainage_info = 9;</code>
     * @return \Temporal\Api\Deployment\V1\VersionDrainageInfo|null
     */
    public function getDrainageInfo()
    {
        return $this->drainage_info;
    }

    public function hasDrainageInfo()
    {
        return isset($this->drainage_info);
    }

    public function clearDrainageInfo()
    {
        unset($this->drainage_info);
    }

    /**
     * Helps user determine when it is safe to decommission the workers of this
     * Version. Not present when version is current or ramping.
     * Current limitations:
     * - Not supported for Unversioned mode.
     * - Periodically refreshed, may have delays up to few minutes (consult the
     *   last_checked_time value).
     * - Refreshed only when version is not current or ramping AND the status is not
     *   "drained" yet.
     * - Once the status is changed to "drained", it is not changed until the Version
     *   becomes Current or Ramping again, at which time the drainage info is cleared.
     *   This means if the Version is "drained" but new workflows are sent to it via
     *   Pinned Versioning Override, the status does not account for those Pinned-override
     *   executions and remains "drained".
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.VersionDrainageInfo drainage_info = 9;</code>
     * @param \Temporal\Api\Deployment\V1\VersionDrainageInfo $var
     * @return $this
     */
    public function setDrainageInfo($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Deployment\V1\VersionDrainageInfo::class);
        $this->drainage_info = $var;

        return $this;
    }

    /**
     * Arbitrary user-provided metadata attached to this version.
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.VersionMetadata metadata = 10;</code>
     * @return \Temporal\Api\Deployment\V1\VersionMetadata|null
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    public function hasMetadata()
    {
        return isset($this->metadata);
    }

    public function clearMetadata()
    {
        unset($this->metadata);
    }

    /**
     * Arbitrary user-provided metadata attached to this version.
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.VersionMetadata metadata = 10;</code>
     * @param \Temporal\Api\Deployment\V1\VersionMetadata $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Deployment\V1\VersionMetadata::class);
        $this->metadata = $var;

        return $this;
    }

}

